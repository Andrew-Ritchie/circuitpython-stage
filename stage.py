import time
import array
import _stage


FONT = (b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00P\x01\xd0\x01\xd5\x15\xed\x1e\xf5\x17\xd4\x05P\x01'
        b'\x00\x00P\x01\xd4\x05\xf5\x17\xed\x1e\xd5\x15\xd0\x01P\x01'
        b'\x00\x00P\x01\xd0\x05\x95\x17\xfd\x1f\x95\x17\xd0\x05P\x01'
        b'\x00\x00P\x01\xd4\x01\xb5\x15\xfd\x1f\xb5\x15\xd4\x01P\x01'
        b'\x00\x00T\x05\xa9\x1a\xd9\x19}\x1f\xdd\x1d\xf9\x1bT\x05'
        b'\x00\x00T\x05\xa9\x1aY\x19\xdd\x1d]\x1d\xf9\x1bT\x05'
        b'\x00\x00\x14\x05t\x07\xe4\x06\xfd\x1f\xe5\x16\xd0\x01P\x01'
        b'\x00\x00T\x05\xe4\x06\xf4\x07\x95\x15]\x1d\xd5\x15P\x01'
        b'\x00\x00@\x00\xd0\x01\xe4\x06\xf9\x1b\xfd\x1fy\x1b\x14\x05'
        b'\x00\x00P\x01\xa4\x06\xf9\x1a\xed\x1b\xad\x1b\xf4\x06P\x01'
        b'\x00\x00@\x00\x90\x01\xa4\x06\xfd\x1a\xf4\x06\xd0\x01@\x00'
        b'\x00\x00U\x00\xad\x01\xfd\x06\xed\x1b\xb4\x1b\xd0\x1a@\x15'
        b'\x00\x00U\x15m\x1am\x1b]\x19\xbd\x1a\xf5\x17T\x05\x00\x00\x05\x01'
        b'Y\x06\x94\x01\xe4\x07\xd9\x1fD\x1f\x00\x15\x00\x00@\x00'
        b'\x90\x01\xf4\x06\xfd\x1a\xfd\x1a\xbd\x1aT\x05\x00\x00T\x05'
        b'\xf4\x06\xb4\x06\xf5\x16\xfd\x1fm\x1e\x15\x15\x00\x00P\x01'
        b'\xb4\x06\xf4\x06P\x01\x04\x04\x04\x04P\x01\x00\x00P\x01'
        b'\xf4\x07]\x1d\x1d\x15]\x1at\x1bP\x05\x00\x00\x14\x00i\x05m\x1a'
        b'T\x1b\x10\x05\x10\x01T\x00\x00\x00T\x05\xa9\x1a\xb9\x1a'
        b'\xf4\x06\x90\x01\xf4\x06T\x05\x00\x00T\x05\xe4\x06\xf5\x17'
        b'\xdd\x1d\xdd\x1d\xf5\x17T\x05\x00\x00U\x15\xa9\x1a\xd5\x15'
        b'\xad\x1e\xfd\x1f\xad\x1eU\x15P\x05\xd0\x06\xd0\x05\xd0\x01'
        b'\xe4\x06t\x07\xe4\x06P\x01\x00\x00T\x01\xa5\x05\xb9\x06'
        b'\xf9\x16\xa5\x1d\xd4\x17P\x05\x00\x00U\x15\xfd\x1f\xbd\x1f'
        b'\xad\x1e\xbd\x1f\xfd\x1fU\x15\x00\x00T\x05\xa5\x16\xf9\x1a'
        b'\xf9\x1a\xb4\x06\xf9\x1aU\x15\x00\x00\x14\x05e\x16y\x1b'
        b'\xd4\x05y\x1be\x16\x14\x05\x00\x00P\x15\xd0\x1d\xd4\x1d'
        b'\xf5\x1d\x9d\x19\xf5\x1fT\x15\x00\x00\x00\x00P\x01\xe4\x06'
        b'\xf4\x07\xe4\x06P\x01\x00\x00\x00\x00U\x15\xdd\x1dU\x15'
        b'\x99\x19\xdd\x1d\xdd\x1dU\x15\x00\x00U\x15\xdd\x1dU\x15'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x01\xd0\x01P\x01'
        b'\x90\x01\xd0\x01\xd0\x01P\x01\x00\x00\x00\x00\x00\x00\x00\x00'
        b'T\x05d\x06t\x07T\x05\x00\x00\x14\x05u\x17\xed\x1et\x07\xed\x1e'
        b'u\x17\x14\x05\x00\x00U\x05\xf9\x17\x94\x19\xf5\x17\x99\x05'
        b'\xf5\x1bT\x15\x00\x00\x05\x15\x1d\x1dt\x15\xd0\x01U\x07'
        b'\x1d\x1d\x15\x14\x00\x00T\x14\xe5\x1d]\x17\xdd\x01u\x07'
        b'\xe4\x05T\x01\x00\x00\x00\x00\x00\x00\x00\x00P\x01\x90\x01'
        b'\xd0\x01P\x01\x00\x00@\x05P\x06\x90\x01\xd0\x01\x90\x01P\x06@\x05'
        b'\x00\x00T\x00d\x01\x90\x01\xd0\x01\x90\x01d\x01T\x00'
        b'\x00\x00\x00\x00\x14\x05t\x07\xd0\x01t\x07\x14\x05\x00\x00'
        b'\x00\x00P\x01\x90\x01\xd5\x15\xf9\x1b\xd5\x15\x90\x01P\x01'
        b'\x00\x00P\x01\x90\x01\xd0\x01P\x01\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00U\x15\xf9\x1bU\x15\x00\x00\x00\x00'
        b'\x00\x00P\x01\xd0\x01P\x01\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x04\x00\x1d\x00t\x00\xd0\x01@\x07\x00\x1d\x00\x04'
        b'\x00\x00T\x05\xe5\x16i\x19\xdd\x1dY\x1a\xe5\x16T\x05\x00\x00T\x05'
        b'\xe4\x06\xd0\x01\xd0\x01\xe4\x01\xd0\x01@\x01\x00\x00U\x15'
        b'\xfd\x1fY\x05\xf4\x17U\x1d\xf9\x17T\x05\x00\x00T\x05\xf5\x17]\x1d'
        b'\x94\x07]\x1d\xf5\x17T\x05\x00\x00@\x05U\x17\xfd\x1f]\x17]\x05'
        b't\x00P\x00\x00\x00U\x05\xf9\x1bU\x1d\xfd\x1b]\x05\xfd\x1bU\x15'
        b'\x00\x00T\x05\xf9\x1b]\x1d\xfd\x1b]\x05\xf5\x1bT\x15\x00\x00T\x00'
        b't\x00d\x01\xd0\x06U\x19\xfd\x1fU\x15\x00\x00T\x05\xf5\x17]\x1d'
        b'\xf5\x17]\x1d\xf5\x17T\x05\x00\x00U\x05\xf9\x17T\x1d\xf9\x1f]\x1d'
        b'\xf9\x1bT\x05\x00\x00\x00\x00P\x01\xd0\x01P\x01\xd0\x01'
        b'P\x01\x00\x00\x00\x00P\x01\x90\x01\xd0\x01P\x01\xd0\x01'
        b'P\x01\x00\x00\x00\x00\x00\x05@\x07\xd0\x01t\x00\xd0\x01'
        b'@\x07\x00\x05\x00\x00\x00\x00U\x15\xf9\x1bT\x05\xf9\x1b'
        b'U\x15\x00\x00\x00\x00\x14\x00t\x00\xd0\x01@\x07\xd0\x01'
        b't\x00\x14\x00\x00\x00P\x01\xd0\x01P\x05\xd5\x16]\x1d\xe5\x17T\x05'
        b'\x00\x00T\x05\xf5\x06Y\x15\x9d\x1b\xdd\x1d\xb5\x17T\x05'
        b'\x00\x00\x15\x15]\x1d\xed\x1e]\x1dY\x07\xe4\x01P\x00\x00\x00U\x05'
        b'\xfd\x17]\x1d\xed\x16]\x07\xfd\x05U\x01\x00\x00T\x05\xf5\x17]\x1d'
        b'\x1d\x14]\x01\xf5\x06T\x05\x00\x00U\x05\xfd\x16]\x1d\x1d\x1d]\x17'
        b'\xbd\x05U\x01\x00\x00U\x15\xfd\x1b]\x15\xfd\x01]\x01\xfd\x06U\x05'
        b'\x00\x00\x15\x00]\x01\xbd\x01]\x00]\x15\xfd\x1bU\x15\x00\x00T\x15'
        b'\xf5\x1bY\x1d\xdd\x1f]\x05\xf5\x1bT\x15\x00\x00\x15\x15'
        b'\x1d\x1d]\x1d\xfd\x1f]\x1d\x1d\x1d\x15\x15\x00\x00T\x05'
        b'\xe4\x06\xd0\x01\xd0\x01\xd0\x01\xe4\x06T\x05\x00\x00T\x05'
        b'\xf5\x17]\x19\x05\x1d\x00\x1d\x00\x1d\x00\x15\x00\x00\x15\x14'
        b'\x1d\x1d]\x07\xfd\x01]\x07\x1d\x1d\x15\x14\x00\x00U\x15'
        b'\xfd\x1f]\x15\x1d\x00\x1d\x00\x1d\x00\x15\x00\x00\x00\x15\x15'
        b'\x1d\x1d]\x1d\xdd\x1dm\x1e\x1d\x1d\x05\x14\x00\x00\x15\x14'
        b'\x1d\x1d]\x1e\xdd\x1dm\x1d\x1d\x1d\x05\x15\x00\x00T\x05'
        b'\xe5\x17]\x1d\x1d\x1d]\x17\xb5\x05T\x01\x00\x00\x15\x00'
        b']\x05\xfd\x17]\x1d]\x19\xfd\x16U\x05\x00\x15T\x1d\xe5\x07]\x1e'
        b'\x1d\x1d]\x17\xb5\x05T\x01\x00\x00\x15\x15]\x1d\xfd\x07]\x1d]\x19'
        b'\xfd\x16U\x05\x00\x00U\x05\xf9\x17T\x1d\xe5\x06]\x01\xf5\x07T\x05'
        b'\x00\x00P\x01\xd0\x01\xd0\x01\xd0\x01\xd5\x15\xf9\x1bU\x15'
        b'\x00\x00P\x05\xd4\x17u\x19\x19\x1d\x1d\x1d\x1d\x1d\x15\x15'
        b'\x00\x00@\x00\xd0\x01d\x06u\x17\x19\x19\x1d\x1d\x05\x14'
        b'\x00\x00\x14\x05u\x17\xd9\x19]\x1d\x1d\x1d\x1d\x1d\x15\x15'
        b'\x00\x00\x05\x14\x1d\x1dt\x07\xd0\x01t\x07\x1d\x1d\x05\x14'
        b'\x00\x00P\x01\xd0\x01\x94\x05u\x17\x19\x19\x1d\x1d\x15\x15'
        b'\x00\x00U\x15\xf9\x1bt\x15\xd0\x01U\x07\xf9\x1bU\x15\x00\x00T\x05'
        b'\xf4\x06t\x01t\x00t\x01\xf4\x06T\x05\x00\x00\x00\x14\x00\x1d@\x07'
        b'\xd0\x01t\x00\x1d\x00\x05\x00\x00\x00T\x05\xe4\x07P\x07@\x07P\x07'
        b'\xe4\x07T\x05\x00\x00\x00\x00\x00\x00\x04\x04\x19\x19t\x07'
        b'\xd0\x01@\x00\x00\x00U\x15\xf9\x1bU\x15\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x01P\x07\xd4\x06'
        b'\xb4\x01P\x00\x00\x00T\x15\xf5\x1f]\x1d]\x1d\xe5\x1fT\x15\x00\x00'
        b'\x00\x00U\x05\xfd\x17]\x1d]\x1d\xfd\x16]\x05\x15\x00\x00\x00T\x05'
        b'\xf5\x16]\x1d]\x05\xe5\x07T\x05\x00\x00\x00\x00T\x15\xf5\x1f]\x1d'
        b']\x1d\xe5\x1fT\x1d\x00\x15\x00\x00T\x05\xf5\x07]\x15'
        b'\xad\x1e\xf5\x17T\x05\x00\x00P\x01\xd0\x01\xd0\x01\xd4\x05'
        b'\xf4\x07\xd4\x15P\x1e@\x15U\x05\xf9\x16T\x1d\xf5\x1f]\x1d\xe5\x1f'
        b'T\x15\x00\x00\x00\x00\x15\x15\x1d\x1d\x1d\x1d]\x1d\xfd\x16'
        b']\x05\x15\x00\x00\x00P\x01\xd0\x01\xd0\x01\xd0\x01P\x01'
        b'\xd0\x01P\x01T\x01\xe5\x05]\x07E\x07@\x07@\x05@\x07@\x05'
        b'\x00\x00\x15\x14\x1d\x1d]\x19\xfd\x06]\x1d\x1d\x14\x15\x00'
        b'\x00\x00P\x05\xd4\x07d\x05t\x00t\x00t\x00T\x00\x00\x00\x15\x15'
        b']\x1d\xdd\x1d\xdd\x19\xfd\x17U\x05\x00\x00\x00\x00\x15\x15'
        b'\x1d\x1d\x1d\x1d]\x19\xfd\x17U\x05\x00\x00\x00\x00T\x05'
        b'\xf5\x17]\x1d]\x1d\xe5\x17T\x05\x00\x00\x15\x00]\x05\xfd\x17]\x1d'
        b']\x1d\xfd\x17U\x05\x00\x00\x00\x15T\x1d\xf5\x1f]\x1d]\x1d\xf5\x1f'
        b'T\x15\x00\x00\x00\x00\x15\x00\x1d\x00]\x04}\x1d\xdd\x16'
        b'U\x05\x00\x00\x00\x00U\x05\xfd\x16\x94\x1e\xad\x05\xe5\x1f'
        b'T\x15\x00\x00\x00\x00P\x05\xd4\x07t\x01t\x01\xfd\x07u\x05T\x00'
        b'\x00\x00T\x15\xe5\x1f]\x1d\x1d\x1d\x1d\x1d\x15\x15\x00\x00'
        b'\x00\x00P\x01\xd4\x05u\x17\x19\x19\x1d\x1d\x05\x14\x00\x00'
        b'\x00\x00T\x05u\x17\xd9\x19\xdd\x1d]\x1d\x15\x15\x00\x00'
        b'\x00\x00\x15\x15m\x1e\xd4\x05\xd4\x05m\x1e\x15\x15\x00\x00'
        b'U\x05\xfd\x17T\x1d\xe5\x1f]\x1d\x1d\x1d\x15\x15\x00\x00'
        b'\x00\x00U\x15\xfd\x1f\x95\x06\xa4\x15\xfd\x1fU\x15\x00\x00'
        b'\x00\x00@\x05\x90\x07\xd0\x01t\x01\xd0\x01\x90\x07@\x05'
        b'\x00\x00P\x01\x90\x01\xd0\x01\xd0\x01\xd0\x01\x90\x01P\x01'
        b'\x00\x00T\x00\xb4\x01\xd0\x01P\x07\xd0\x01\xb4\x01T\x00'
        b'\x00\x00\x00\x00@\x05U\x17\xd9\x19u\x15T\x00\x00\x00\x00\x00U\x15'
        b'\xfd\x1f\xed\x1e\xbd\x1f\xed\x1e\xfd\x1fU\x15')
PALETTE = (b'\xf8\x1f\x00\x00\xcey\xff\xff\xf8\x1f\x00\x0f\xcb\xc0\xfe\x80'
           b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')


def color565(r, g, b):
    return (r & 0xf8) << 8 | (g & 0xfc) << 3 | b >> 3


class BMP16:
    """Read 16-color BMP files."""

    def __init__(self, filename):
        self.filename = filename
        self.colors = 0

    def read_header(self):
        """Read the file's header information."""

        if self.colors:
            return
        with open(self.filename, 'rb') as f:
            f.seek(10)
            self.data = int.from_bytes(f.read(4), 'little')
            f.seek(18)
            self.width = int.from_bytes(f.read(4), 'little')
            self.height = int.from_bytes(f.read(4), 'little')
            f.seek(46)
            self.colors = int.from_bytes(f.read(4), 'little')

    def read_palette(self):
        """Read the color palette information."""

        palette = array.array('H', (0 for i in range(16)))
        with open(self.filename, 'rb') as f:
            f.seek(self.data - self.colors * 4)
            for color in range(self.colors):
                buffer = f.read(4)
                c = color565(buffer[2], buffer[1], buffer[0])
                palette[color] = (c << 8) | (c >> 8)
        return palette

    def read_data(self, offset=0, size=-1):
        """Read the image data."""

        with open(self.filename, 'rb') as f:
            f.seek(self.data + offset)
            return f.read(size)


class Bank:
    """
    Store graphics for the tiles and sprites.

    A single bank stores exactly 16 tiles, each 16x16 pixels in 16 possible
    colors, and a 16-color palette. We just like the number 16.

    """

    def __init__(self, buffer=None, palette=None):
        self.buffer = buffer
        self.palette = palette

    @classmethod
    def from_bmp16(cls, filename):
        bmp = BMP16(filename)
        bmp.read_header()
        if bmp.width != 16 or bmp.height != 256:
            raise ValueError("Not 16x256!")
        palette = bmp.read_palette()
        buffer = bmp.read_data(0, 2048)
        return cls(buffer, palette)


class Grid:
    """
    A grid is a layer of tiles that can be displayed on the screen. Each square
    can contain any of the 16 tiles from the associated bank.
    """

    def __init__(self, bank, width=8, height=8, palette=None):
        self.buffer = bytearray((width * height) >> 1)
        self.x = 0
        self.y = 0
        self.z = 0
        self.width = width
        self.height = height
        self.bank = bank
        self.palette = palette or bank.palette
        self.layer = _stage.Layer(width, height, self.bank.buffer,
                                  self.palette, self.buffer)

    def tile(self, x, y, tile=None):
        """Get or set what tile is displayed in the given place."""

        if not 0 <= x < self.width or not 0 <= y < self.height:
            return 0
        b = self.buffer[(x * self.width + y) >> 1]
        if tile is None:
            return b & 0x0f if y & 0x01 else b >> 4
        if y & 0x01:
            b = b & 0xf0 | tile
        else:
            b = b & 0x0f | (tile << 4)
        self.buffer[(x * self.width + y) >> 1] = b

    def move(self, x, y, z=None):
        """Shift the whole layer respective to the screen."""

        self.x = x
        self.y = y
        if z is not None:
            self.z = z
        self.layer.move(x, y)


class Sprite:
    """
    A sprite is a layer containing just a single tile from the associated bank,
    that can be positioned anywhere on the screen.
    """

    def __init__(self, bank, frame, x, y, z=0, rotation=0, palette=None):
        self.bank = bank
        self.palette = palette or bank.palette
        self.frame = frame
        self.rotation = rotation
        self.x = x
        self.y = y
        self.z = z
        self.layer = _stage.Layer(1, 1, self.bank.buffer, self.palette)
        self.layer.move(x, y)
        self.layer.frame(frame, rotation)
        self.px = x
        self.py = y

    def move(self, x, y, z=None):
        """Move the sprite to the given place."""

        self.px = self.x
        self.py = self.y
        self.x = x
        self.y = y
        if z is not None:
            self.z = z
        self.layer.move(x, y)

    def set_frame(self, frame=None, rotation=None):
        """Set the current graphic and rotation of the sprite."""

        if frame is not None:
            self.frame = frame
        if rotation is not None:
            self.rotation = rotation
        self.layer.frame(self.frame, self.rotation)


class Text:
    """Text layer. For displaying text."""

    def __init__(self, width, height, font=FONT, palette=PALETTE):
        self.width = width
        self.height = height
        self.font = font
        self.palette = palette
        self.buffer = bytearray(width * height)
        self.layer = _stage.Text(width, height, self.font,
                                 self.palette, self.buffer)
        self.row = width - 1
        self.column = 0

    def char(self, x, y, c=None, hightlight=False):
        """Get or set the character at the given location."""
        if not 0 <= x < self.width or not 0 <= y < self.height:
            return
        if c is None:
            return chr(self.buffer[y * self.width + x])
        c = ord(c)
        if hightlight:
            c |= 0x80
        self.buffer[y * self.width + x] = c

    def move(self, x, y, z=None):
        """Shift the whole layer respective to the screen."""
        self.x = x
        self.y = y
        if z is not None:
            self.z = z
        self.layer.move(x, y)

    def cursor(self, row=0, column=0):
        """Move the text cursor to the specified row and column."""
        self.row = min(max(0, row), self.width - 1)
        self.column = min(max(0, column), self.height - 1)

    def text(self, text, hightlight=False):
        """Display text starting at the current cursor location."""
        for c in text:
            if ord(c) >= 32:
                self.char(self.row, self.column, c, hightlight)
                self.column += 1
            if self.column >= self.height or c == '\n':
                self.column = 0
                self.row -= 1
                if self.row < 0:
                    self.row = self.width - 1

    def clear(self):
        """Clear all text from the layer."""
        for i in range(self.width * self.height):
            self.buffer[i] = 0


class Stage:
    """
    Represents what is being displayed on the screen.
    """
    buffer = bytearray(512)

    def __init__(self, display, fps=6):
        self.layers = []
        self.display = display
        self.last_tick = time.monotonic()
        self.tick_delay = 1 / fps

    def tick(self):
        """Wait for the start of the next frame."""
        self.last_tick += self.tick_delay
        wait = max(0, self.last_tick - time.monotonic())
        if wait:
            time.sleep(wait)
        else:
            self.last_tick = time.monotonic()

    def render(self, x0, y0, x1, y1):
        """Update a rectangle of the screen."""
        layers = [l.layer for l in self.layers]
        self.display.block(x0, y0, x1 - 1, y1 - 1)
        _stage.render(x0, y0, x1, y1, layers, self.buffer, self.display.spi)

